fn add(a: i32, b: i32) -> i32 { // Return Type은 i32 입니다. / 함수 정의에 타입 선언은 반드시 있어야 합니다.
    a + b                       // 함수의 최종 표현식 결과를 반환하기 위해 별도의 return 문은 필요하지 않습니다.
}                               // 함수 선언 시 마지막에 세미콜론을 붙이게 되면 의미가 달라져, i32 타입 결과가 아니라 ()(유닛) 타입 결과를 반환하게 됩니다.

// Rust에서는 main()의 위치를 융통성 있게 둘 수 있습니다.
// main()은 기본적으로 ()(유닛)를 반환하지만 Result도 반환할 수 있습니다.

fn main() {                     // 변수는 기본적으로 불변 항목으로, 읽기 / 쓰기가 아니라 읽기 전용입니다.
    let a = 10;             // 데이터 타입은 컴파일러가 추론합니다.
    let b: i32 = 20;             // 또는 변수 선언 시 프로그래머가 직접 지정합니다.
    let c = 30i32;          // 숫자 데이터 타입은 해당 리터럴 형식에 타입 애너테이션을 붙일 수 있습니다.
    let d = 30_i32;         // 숫자에는 밑줄(_)을 쓸 수 있습니다. 가독성을 좋게 하기 위해서일 뿐 다른 기능적인 요소는 없습니다.
    let e = add(add(a, b), add(c, d));  

    println!("(a + b) + (c + d) = {}", e);
}
